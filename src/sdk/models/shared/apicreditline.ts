/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

export enum Currency {
    Eur = "EUR",
    Gbp = "GBP",
}

export class APICreditLineAddress extends SpeakeasyBase {
    @SpeakeasyMetadata()
    addressLine1?: string;

    @SpeakeasyMetadata()
    addressLine2?: string;

    @SpeakeasyMetadata()
    city?: string;

    @SpeakeasyMetadata()
    country?: string;

    @SpeakeasyMetadata()
    postalCode?: string;

    @SpeakeasyMetadata()
    state?: string;
}

/**
 * Type of legal business identifier of the business, such as the SIRET in France.
 */
export enum APICreditLineIdentifierType {
    Siret = "siret",
    Siren = "siren",
    VatNumber = "vat_number",
    Name = "name",
    Nif = "nif",
    Cif = "cif",
    Kvk = "kvk",
    Bsn = "bsn",
    HrNummer = "hr_nummer",
    BelgiumRegistrationNumber = "belgium_registration_number",
    Steuernummer = "steuernummer",
    LessThanNilGreaterThan = "<nil>",
}

export class DefaultBorrower extends SpeakeasyBase {
    @SpeakeasyMetadata()
    address?: APICreditLineAddress;

    @SpeakeasyMetadata()
    id?: any;

    /**
     * Legal identifier of the business, such as its SIRET in France.
     */
    @SpeakeasyMetadata()
    identifier: string;

    /**
     * Type of legal business identifier of the business, such as the SIRET in France.
     */
    @SpeakeasyMetadata()
    identifierType?: APICreditLineIdentifierType;

    /**
     * Legal form of the business.
     */
    @SpeakeasyMetadata()
    legalForm?: string;

    /**
     * Legal name of the business.
     */
    @SpeakeasyMetadata()
    name?: string;

    /**
     * Name of the national organization where the business is registered. For example the RCS of Paris in France
     */
    @SpeakeasyMetadata()
    registrationBody?: string;

    /**
     * The part of the capital of a company that comes from the issue of shares, in cents.
     */
    @SpeakeasyMetadata()
    shareCapital?: number;

    /**
     * The VAT number of the business, if European
     */
    @SpeakeasyMetadata()
    vatNumber?: string;
}

export enum DefaultBorrowerStrategy {
    Buyer = "BUYER",
    Seller = "SELLER",
    LessThanNilGreaterThan = "<nil>",
}

export class APICreditLineSchemasAddress extends SpeakeasyBase {
    @SpeakeasyMetadata()
    addressLine1?: string;

    @SpeakeasyMetadata()
    addressLine2?: string;

    @SpeakeasyMetadata()
    city?: string;

    @SpeakeasyMetadata()
    country?: string;

    @SpeakeasyMetadata()
    postalCode?: string;

    @SpeakeasyMetadata()
    state?: string;
}

/**
 * Type of legal business identifier of the business, such as the SIRET in France.
 */
export enum APICreditLineSchemasIdentifierType {
    Siret = "siret",
    Siren = "siren",
    VatNumber = "vat_number",
    Name = "name",
    Nif = "nif",
    Cif = "cif",
    Kvk = "kvk",
    Bsn = "bsn",
    HrNummer = "hr_nummer",
    BelgiumRegistrationNumber = "belgium_registration_number",
    Steuernummer = "steuernummer",
    LessThanNilGreaterThan = "<nil>",
}

export class DefaultGuarantor extends SpeakeasyBase {
    @SpeakeasyMetadata()
    address?: APICreditLineSchemasAddress;

    @SpeakeasyMetadata()
    id?: any;

    /**
     * Legal identifier of the business, such as its SIRET in France.
     */
    @SpeakeasyMetadata()
    identifier: string;

    /**
     * Type of legal business identifier of the business, such as the SIRET in France.
     */
    @SpeakeasyMetadata()
    identifierType?: APICreditLineSchemasIdentifierType;

    /**
     * Legal form of the business.
     */
    @SpeakeasyMetadata()
    legalForm?: string;

    /**
     * Legal name of the business.
     */
    @SpeakeasyMetadata()
    name?: string;

    /**
     * Name of the national organization where the business is registered. For example the RCS of Paris in France
     */
    @SpeakeasyMetadata()
    registrationBody?: string;

    /**
     * The part of the capital of a company that comes from the issue of shares, in cents.
     */
    @SpeakeasyMetadata()
    shareCapital?: number;

    /**
     * The VAT number of the business, if European
     */
    @SpeakeasyMetadata()
    vatNumber?: string;
}

/**
 * The type of account number (e.g. IBAN).
 */
export enum APICreditLineSchemasDefaultLoanFromAccountNumberType {
    Iban = "iban",
    AccountNumber = "account_number",
    InternalId = "internal_id",
}

/**
 * The type of bank identifier (e.g. BIC).
 */
export enum APICreditLineSchemasDefaultLoanFromBankIdentifierType {
    Bic = "bic",
    RoutingNumber = "routing_number",
    Name = "name",
}

export class DefaultLoanFrom extends SpeakeasyBase {
    /**
     * The account identifier. Only IBANs are supported at the moment.
     */
    @SpeakeasyMetadata()
    accountNumber: string;

    /**
     * The type of account number (e.g. IBAN).
     */
    @SpeakeasyMetadata()
    accountNumberType: APICreditLineSchemasDefaultLoanFromAccountNumberType;

    /**
     * The identifier of the bank.
     */
    @SpeakeasyMetadata()
    bankIdentifier: string;

    /**
     * The type of bank identifier (e.g. BIC).
     */
    @SpeakeasyMetadata()
    bankIdentifierType: APICreditLineSchemasDefaultLoanFromBankIdentifierType;
}

/**
 * The type of account number (e.g. IBAN).
 */
export enum APICreditLineAccountNumberType {
    Iban = "iban",
    AccountNumber = "account_number",
    InternalId = "internal_id",
}

/**
 * The type of bank identifier (e.g. BIC).
 */
export enum APICreditLineBankIdentifierType {
    Bic = "bic",
    RoutingNumber = "routing_number",
    Name = "name",
}

export class DefaultRepaymentFrom extends SpeakeasyBase {
    /**
     * The account identifier. Only IBANs are supported at the moment.
     */
    @SpeakeasyMetadata()
    accountNumber: string;

    /**
     * The type of account number (e.g. IBAN).
     */
    @SpeakeasyMetadata()
    accountNumberType: APICreditLineAccountNumberType;

    /**
     * The identifier of the bank.
     */
    @SpeakeasyMetadata()
    bankIdentifier: string;

    /**
     * The type of bank identifier (e.g. BIC).
     */
    @SpeakeasyMetadata()
    bankIdentifierType: APICreditLineBankIdentifierType;
}

export enum DefaultRepaymentMethod {
    DirectDebit = "DIRECT_DEBIT",
    Sct = "SCT",
    P2P = "P2P",
}

/**
 * The type of account number (e.g. IBAN).
 */
export enum APICreditLineSchemasAccountNumberType {
    Iban = "iban",
    AccountNumber = "account_number",
    InternalId = "internal_id",
}

/**
 * The type of bank identifier (e.g. BIC).
 */
export enum APICreditLineSchemasBankIdentifierType {
    Bic = "bic",
    RoutingNumber = "routing_number",
    Name = "name",
}

export class DefaultRepaymentTo extends SpeakeasyBase {
    /**
     * The account identifier. Only IBANs are supported at the moment.
     */
    @SpeakeasyMetadata()
    accountNumber: string;

    /**
     * The type of account number (e.g. IBAN).
     */
    @SpeakeasyMetadata()
    accountNumberType: APICreditLineSchemasAccountNumberType;

    /**
     * The identifier of the bank.
     */
    @SpeakeasyMetadata()
    bankIdentifier: string;

    /**
     * The type of bank identifier (e.g. BIC).
     */
    @SpeakeasyMetadata()
    bankIdentifierType: APICreditLineSchemasBankIdentifierType;
}

export enum Distribution {
    Direct = "DIRECT",
    Partner = "PARTNER",
}

export class APICreditLineSchemasFeesPayerAddress extends SpeakeasyBase {
    @SpeakeasyMetadata()
    addressLine1?: string;

    @SpeakeasyMetadata()
    addressLine2?: string;

    @SpeakeasyMetadata()
    city?: string;

    @SpeakeasyMetadata()
    country?: string;

    @SpeakeasyMetadata()
    postalCode?: string;

    @SpeakeasyMetadata()
    state?: string;
}

/**
 * Type of legal business identifier of the business, such as the SIRET in France.
 */
export enum APICreditLineSchemasFeesPayerIdentifierType {
    Siret = "siret",
    Siren = "siren",
    VatNumber = "vat_number",
    Name = "name",
    Nif = "nif",
    Cif = "cif",
    Kvk = "kvk",
    Bsn = "bsn",
    HrNummer = "hr_nummer",
    BelgiumRegistrationNumber = "belgium_registration_number",
    Steuernummer = "steuernummer",
    LessThanNilGreaterThan = "<nil>",
}

export class FeesPayer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    address?: APICreditLineSchemasFeesPayerAddress;

    @SpeakeasyMetadata()
    id?: any;

    /**
     * Legal identifier of the business, such as its SIRET in France.
     */
    @SpeakeasyMetadata()
    identifier: string;

    /**
     * Type of legal business identifier of the business, such as the SIRET in France.
     */
    @SpeakeasyMetadata()
    identifierType?: APICreditLineSchemasFeesPayerIdentifierType;

    /**
     * Legal form of the business.
     */
    @SpeakeasyMetadata()
    legalForm?: string;

    /**
     * Legal name of the business.
     */
    @SpeakeasyMetadata()
    name?: string;

    /**
     * Name of the national organization where the business is registered. For example the RCS of Paris in France
     */
    @SpeakeasyMetadata()
    registrationBody?: string;

    /**
     * The part of the capital of a company that comes from the issue of shares, in cents.
     */
    @SpeakeasyMetadata()
    shareCapital?: number;

    /**
     * The VAT number of the business, if European
     */
    @SpeakeasyMetadata()
    vatNumber?: string;
}

export class APICreditLine extends SpeakeasyBase {
    /**
     * Remaining amount that can be loaned.
     */
    @SpeakeasyMetadata()
    balanceAvailable?: number;

    @SpeakeasyMetadata()
    balancePending?: number;

    @SpeakeasyMetadata()
    contractNumber?: string;

    @SpeakeasyMetadata()
    currency?: Currency;

    @SpeakeasyMetadata()
    defaultBorrower?: DefaultBorrower;

    @SpeakeasyMetadata()
    defaultBorrowerStrategy?: DefaultBorrowerStrategy;

    @SpeakeasyMetadata()
    defaultGuarantor?: DefaultGuarantor;

    @SpeakeasyMetadata()
    defaultLoanFrom?: DefaultLoanFrom;

    @SpeakeasyMetadata()
    defaultRepaymentFrom?: DefaultRepaymentFrom;

    @SpeakeasyMetadata()
    defaultRepaymentMethod?: DefaultRepaymentMethod;

    @SpeakeasyMetadata()
    defaultRepaymentTo?: DefaultRepaymentTo;

    @SpeakeasyMetadata()
    distribution: Distribution;

    @SpeakeasyMetadata()
    endDate?: Date;

    @SpeakeasyMetadata()
    feesDailyRate?: number;

    @SpeakeasyMetadata()
    feesInterestDailyRate: number;

    @SpeakeasyMetadata()
    feesOperatingDailyRate: number;

    @SpeakeasyMetadata()
    feesPayer?: FeesPayer;

    @SpeakeasyMetadata()
    id?: any;

    /**
     * Maximum amount that can be loaned.
     */
    @SpeakeasyMetadata()
    poolAmount?: number;

    @SpeakeasyMetadata()
    signedAt?: Date;

    @SpeakeasyMetadata()
    startDate: Date;

    @SpeakeasyMetadata()
    vat?: number;
}
