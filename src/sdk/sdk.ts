/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as shared from "../sdk/models/shared";
import { Billing } from "./billing";
import { BusinessData } from "./businessdata";
import { Eligibility } from "./eligibility";
import { Invoice } from "./invoice";
import { Loan } from "./loan";
import { Onboarding } from "./onboarding";
import { Payment } from "./payment";
import { Testing } from "./testing";
import { Webhook } from "./webhook";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.getdefacto.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    /**
     * The security details required to authenticate the SDK
     */
    security?: shared.Security | (() => Promise<shared.Security>);

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: shared.Security | (() => Promise<shared.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "v1.0.0";
    sdkVersion = "2.1.0";
    genVersion = "2.213.3";
    userAgent = "speakeasy-sdk/typescript 2.1.0 2.213.3 v1.0.0 defacto";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

export class Defacto {
    public billing: Billing;
    public onboarding: Onboarding;
    public businessData: BusinessData;
    public eligibility: Eligibility;
    public testing: Testing;
    public invoice: Invoice;
    public loan: Loan;
    public payment: Payment;
    public webhook: Webhook;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: props?.security,
            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.billing = new Billing(this.sdkConfiguration);
        this.onboarding = new Onboarding(this.sdkConfiguration);
        this.businessData = new BusinessData(this.sdkConfiguration);
        this.eligibility = new Eligibility(this.sdkConfiguration);
        this.testing = new Testing(this.sdkConfiguration);
        this.invoice = new Invoice(this.sdkConfiguration);
        this.loan = new Loan(this.sdkConfiguration);
        this.payment = new Payment(this.sdkConfiguration);
        this.webhook = new Webhook(this.sdkConfiguration);
    }
}
